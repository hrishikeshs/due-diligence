name: Deploy

on:
  release:
    types: [published]

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['16.x']

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Build js & css assets using webpack.
        run: |
          cd client/due-diligence-web
          CI=true yarn install
          CI=true yarn build

      - name: Upload Artifact
        uses: actions/upload-artifact@master
        with:
          name: build
          path: |
            client/due-diligence-web/build
            ./appspec.yml
            scripts/
            server/**

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['16.x']
        appname: ['due-diligence']
        deploy-group: ['staging']
        s3-bucket: ['due-diligence-deployments']
        s3-filename: ['due-diligence-staging-${{ github.sha }}']

    steps:
      - uses: actions/checkout@v2

      # Initialize Node.js
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # Install AWS CLI 2
      - name: Install AWS CLI 2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      # Step 1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 2
      - name: Download
        uses: actions/download-artifact@master
        with:
          name: build
          path: ~/download/build
          
      # Step 3
      - name: AWS Deploy push
        run: |
          aws deploy push \
          --application-name ${{ matrix.appname }} \
          --description "This is a revision for the ${{ matrix.appname }}-${{ github.sha }}" \
          --ignore-hidden-files \
          --s3-location s3://${{ matrix.s3-bucket }}/${{ matrix.s3-filename }}.zip \
          --source ${{steps.download.outputs.download-path}} ./

      # Step 4
      - name: Create CodeDeploy Deployment
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name due-diligence \
            --deployment-group-name due-diligence-deployment-group \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
